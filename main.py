import telebot
from telebot import types
import sqlite3
import random
import spoonacular as sp


bot = telebot.TeleBot('')
api = sp.API('')


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    conn = sqlite3.connect("recipes.db")
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS recipes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            ingredients TEXT NOT NULL,
            calories INTEGER NOT NULL
        )
    ''')
    conn.commit()
    conn.close()


init_db()


def add_recipe(name, ingredients_name, calories):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect("recipes.db")
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO recipes (name, ingredients, calories) VALUES (?, ?, ?)",
        (name, ingredients_name, calories)
    )
    conn.commit()
    conn.close()


def get_random_recipe_by_ingredient(ingredient):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º."""
    conn = sqlite3.connect("recipes.db")
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM recipes WHERE ingredients LIKE ?",
        (f'%{ingredient.lower()}%',)
    )
    recipes = cur.fetchall()
    conn.close()
    return random.choice(recipes) if recipes else None


user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç')
    btn2 = types.KeyboardButton('–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç')
    markup.row(btn1, btn2)
    btn3 = types.KeyboardButton('–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω')
    btn4 = types.KeyboardButton('–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç!')
    markup.row(btn3, btn4)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã \n–ë–æ—Ç ¬´–ß—Ç–æ –Ω–∞ —É–∂–∏–Ω?¬ª –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ "
        "–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω üòä\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É üç±",
        reply_markup=markup
    )


@bot.message_handler(content_types=['text'])
def main_func(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = message.chat.id
    text = message.text.strip()

    if text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç':
        user_data[chat_id] = {"step": "name"}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:")
    elif text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç':
        user_data[chat_id] = {"step": "search_ingredient"}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç–µ:")
    elif text == '–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω':
        user_data[chat_id] = {"step": "search_calories"}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    elif text == '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç!':
        try:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–•–æ—á—É –µ—â—ë –æ–¥–∏–Ω –∞–Ω–µ–∫–¥–æ—Ç!üòÉ', callback_data='joke'))
            response = api.get_a_random_food_joke()
            data = response.json()
            bot.reply_to(message, data['text'], reply_markup=markup)
        except Exception as e:
            bot.reply_to(message, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç. –û—à–∏–±–∫–∞: {str(e)}")
    elif chat_id in user_data:
        handle_user_data(chat_id, text, message)


def handle_user_data(chat_id, text, message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."""
    step = user_data[chat_id]["step"]

    if step == "name":
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "ingredients"
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

    elif step == "ingredients":
        user_data[chat_id]["ingredients"] = message.text.lower()
        user_data[chat_id]["step"] = "calories"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

    elif step == "calories":
        try:
            calories = int(text)
            name = user_data[chat_id]["name"]
            ingredients = user_data[chat_id]["ingredients"]
            add_recipe(name, ingredients, calories)
            bot.send_message(chat_id, f"‚úÖ –†–µ—Ü–µ–ø—Ç ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            user_data.pop(chat_id)
        except ValueError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

    elif step == "search_ingredient":
        ingredient = text.lower()
        recipe = get_random_recipe_by_ingredient(ingredient)
        if recipe:
            _, name, ingredients, calories = recipe
            response = (f"üçΩ –†–µ—Ü–µ–ø—Ç: {name}\n"
                       f"üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}\n"
                       f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories} –∫–∫–∞–ª")
            bot.send_message(chat_id, response)
        else:
            bot.send_message(
                chat_id,
                f"–†–µ—Ü–µ–ø—Ç–æ–≤ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º '{ingredient}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç!"
            )

    elif step == "search_calories":
        try:
            target_calories = int(text)
            conn = sqlite3.connect('recipes.db')
            cur = conn.cursor()
            cur.execute("SELECT * FROM recipes WHERE calories = ?", (target_calories,))
            exact_match = cur.fetchone()

            if exact_match:
                _, name, ingredients, calories = exact_match
                response = (f"üçΩ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {name}\n"
                           f"üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}\n"
                           f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories} –∫–∫–∞–ª")
                bot.send_message(chat_id, response)
            else:
                cur.execute(
                    "SELECT * FROM recipes WHERE calories <= ? ORDER BY calories DESC LIMIT 1",
                    (target_calories,)
                )
                lower = cur.fetchone()
                cur.execute(
                    "SELECT * FROM recipes WHERE calories >= ? ORDER BY calories ASC LIMIT 1",
                    (target_calories,)
                )
                upper = cur.fetchone()
                response = []

                if lower:
                    _, name, ingredients, calories = lower
                    response.append(f"‚¨áÔ∏è –ë–ª–∏–∂–∞–π—à–∏–π –º–µ–Ω—å—à–∏–π:\nüçΩ –†–µ—Ü–µ–ø—Ç: {name}\n"
                                  f"üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}\n"
                                  f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories} –∫–∫–∞l")

                if upper:
                    _, name, ingredients, calories = upper
                    response.append(f"‚¨ÜÔ∏è –ë–ª–∏–∂–∞–π—à–∏–π –±–æ–ª—å—à–∏–π:\nüçΩ –†–µ—Ü–µ–ø—Ç: {name}\n"
                                  f"üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}\n"
                                  f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories} –∫–∫–∞l")

                if response:
                    bot.send_message(chat_id, "\n\n".join(response))
                else:
                    bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
            conn.close()
        except ValueError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        finally:
            user_data.pop(chat_id, None)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    if callback.data == 'joke':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–•–æ—á—É –µ—â–µ –æ–¥–∏–Ω –∞–Ω–µ–∫–¥–æ—Ç!üòÉ', callback_data='joke'))
        response = api.get_a_random_food_joke()
        data = response.json()
        bot.send_message(callback.message.chat.id, data['text'], reply_markup=markup)


if __name__ == '__main__':
    bot.polling(none_stop=True)